Question 1)

Part A:

public static int sum( int K, int M)
{
	if(M == 0)
	{
		return K;
	}
	if(M > 0)
	{
		return sum( K , M - 1) + 1;
	}
	if(M < 0)
	{
		return sum( K, M + 1) - 1;
	}
}


Part B:

1) The problem size is the distance of M from 0;

2) Recurrence Equation for M > 0
	sum = K + M
	sum = 1 + {K + (M-1)}
	sum = 1 + [1 + {K + (M-2)}] and so on...
   Recurrence equation for M < 0
	sum = K + M
	sum = {K + (M+1)} - 1
	sum = [{K + (M+2)} - 1] - 1  and so on...
   Base case M = 0
	sum = K + 0 = K

3) 

4)

5) O(|M|)


Question 2)

public TreeNode<T> prune( TreeNode<T> tree, int depth)
{
	if(tree == null)
		return nulll;
	if(depth == 0)
		return null;
	if(depth == 1)
	{
		tree.setChildren(null);
		return tree;
	}
	if(depth > 1)
	{
		ListADT<TreeNode<T>> tempChildren = tree.getChildren();
		Iterator<TreeNode<T>> itr = tempChildren.iterator();
		while(itr.hasNext())
		{
			prune(itr.next(), depth-1);
		}
		return tree;

	}
}

